input TextRecInput {
  type: RecordType!
  value: String!
  device: String!
  profile: String!
  uuid: String!
  createdAt: Date!
}

"""
Map database id to uuid, basically a dictionary
"""
type IdMapping {
  id: String!
  uuid: String!
}

type SyncResponse {
  newRecords: [Rec]!
  """
  when client-side records got uploaded, they only have uuid, not database id (which is generated by DB)
  The sync response should tell client what database id is assigned to a record with uuid
  id field on client-side also serves the responsibility of telling whether a record has been uploaded
  """
  idMapping: [IdMapping]!
}

type Mutation {
  # Record
  addFileRecord(
    type: RecordType!
    value: String!
    device: String!
    profile: String!
    file: Upload!
  ): AddRecordResponse
  singleUpload(file: Upload!): File!

  """
  add record without passing a uuid and createdAt, this is not a regular query for client side
  for web app that's completely on cloud
  If web app supports offline, this is also not the right query to use
  """
  addRecord(
    type: RecordType!
    value: String!
    device: String!
    profile: String!
  ): AddRecordResponse
  
  """
  Upload records from client side. Client should know which records haven't been uploaded yet.
  Return an array of id mapping. Uploaded records don't have database id. Server will save them and assign database id to them.
  And server will return an array of id-uuid pairs to client. So that client can update its local records with database id.
  """
  uploadRecords(records: [TextRecInput]!): [IdMapping]!

  deleteRecord(uuid: ID!): DeleteRecordResponse

  """
  Update a record content, there is not a use case for now.
  I didn't plan to support content update because it's not really necessary for a clipboard app.
  """
  updateRecord(uuid: ID!, newValue: String!): UpdateRecordResponse

  """
  Sync Record between client and server side
  """
  sync(uuids: [ID]!, records: [TextRecInput]!): SyncResponse

  # User
  """
  The password should be hashed to prevent server side from computing the password hash which could be used to decrypt client-side encrypted data
  """
  login(email: String!, password: String!): LoginResponse
  register(
    username: String!
    email: String!
    password: String!
    code: String!
  ): RegisterResponse
  addProfile(profile: String!): UpdateProfileResponse
  deleteProfile(profile: String!): UpdateProfileResponse
  refreshAccessToken(refreshToken: String!): RefreshAccessTokenResponse
  renameProfile(
    originalProfile: String!
    newProfile: String!
  ): RenameProfileResponse
  sendEmailOwnershipVerificationCode(
    username: String!
    email: String!
  ): StandardResponse
  verifyEmailOwnership(
    username: String!
    email: String!
    code: String!
  ): VerifyEmailOwnershipResponse
}

type Query {
  # Root
  online: Boolean
  # Record
  """All Record. No Limit, No Filtering"""
  records: [Rec]
  recordsLaterThan(date: Date!): [Rec]
  recordsByUUID(uuids: [ID]!): [Rec]
  # User
  me: User
  userByEmail(email: String!): User
  userById(id: String!): User
  usernameExists(username: String!): Boolean
  emailExists(email: String!): Boolean
  """
  Fetch all missing records from server
  client sends an array of uuids of all of its records.
  Server will compute the difference between the local records and the ones on server, and send back the ones missing on client-side.
  """
  fetchMissingRecords(uuids: [ID]!): [Rec]!
}
